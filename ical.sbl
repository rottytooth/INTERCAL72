THE PRINCETON INTERCAL COMPILER

INITIALIZATION

    *  UNDOCUMENTED OPTIONS:
    *
    *  012 TO LIST & PRINT
    *  0120 TO INSERT SPITBOL INTO PFX
    *  0SLIBRARY TO CREATE LIBRARY
    *  0PUNSOURCE TO PUNCH ROFF DECK

 1  &FULLSCAN = 1
 2  &STLIMIT = 16777215
 3  &ERRLIMIT = 1 SETEXIT(.ERR)
 4  RX = LOAD('KLOCK()INTEGER') REMDR(KLOCK() + SUBSTR(DATE(),4,2),
   + 542288 * 2 + 1)
 5  &TRIM = 1 DEFINE('SKIP(X)FIND',.FIND)
 6  RESULT = ' :(START);' OUTPUT(.FILE,'SCRATCH') INPUT(.OPT,'SCRATCH')
 7  OPT = OPT
 8  (OUTPUT(.EJ,,'1') OUTPUT(.PLUS,,'+') DEFINE('DF(X)') DETACH(.OPT))
 9  DF('COMP(S);PR(X);CV(X);O(X)Y;PACK(PACK);POL(Z);EXPR()PTRX;ELEM()PTRX')
10  DF('FIND(X);EXLIST(X);PUSH(N);ID()PTRX,QUOT;ADD(X);ERROR(NUM,MSG,NXT)')
11  DF('NUM(N,OPT)PTRX;MESH()PTRX;VAR(X)PTRX;GEBIG(I,J);ARR(X)PTRX;VA(X)')
12  DF('VS(X);VSM();EXP();BITS(N);SUB(X)PTRX,VAL,TYP;CLR();TB(X)L;PFX(X)')
13  DF('P2(X,WID);RND(N);FLO(X);QT(X);RD2();PDS(M);PLUR(N);NO(X)')
14  DG = SPAN('0123456789')
15  HEX0 = SUBSTR(&ALPHABET,1,1)
16  HEX012 = SUBSTR(&ALPHABET,1,3)
17  TB('BT=2(Â¢=I/~=S);UT=3(&=A/V=O/v=X);TY=4(.=A/:=B/,=C/;=D);GER=12')
18  TB('LNG=4(.=SHORT/:=LONG/,=SHORT/;=LONG);LABEL=50(X=X)')
19  A = 'CALCULATING1NEXTING2FORGETTING3RESUMING4STASHING5RETRIEVING6'
   +      'IGNORING7REMEMBERING8ABSTAINING9REINSTATING10'
   +      'WRITINGIN12READINGOUT13'
20 GERL A (BREAK('123456789') . V) (DG . U) = :F(GERK)
21  GER<V> = CV(U) :(GERL)
22 GERK DATA('LIST(CONT,NEXT)')
23  STMTS = ARRAY(13)
24  TWO31 = 2147483648.D0
25  V = DUPL(' ',165) '-' DUPL(' ',90)
26  ESE = ((NOTANY('"') "'" LEN(1)) | ('"' "'" NOTANY('"')))  *QT()
27  IDP = ((('(' DG ')' (SPAN(' ') | '')) | '')
   +              ('PLEASE DO' | 'PLEASE' | 'DO'))   A
28  OPT HEX012   LST =
29  LST = REWIND('SCRATCH') DIFFER(LST) ',LIST,PRINT'
30  FILE = '-IN80,FAIL,NOLIST' LST
31  OPT = IDENT(OPT) 'NONE'
32  ('OPTIONS SPECIFIED:  ' OPT) LEN(18) $ EJ '' $ OUTPUT REM $ OUTPUT
33  OPT = ',' OPT ','
34  OPT ',NONE,' = ','
35  OPT ',' HEX0 'S' . LIB 'LIBRARY,' '' . RESULT = ','
36  OPT ',OPT,' | ',NOOPT,' = ','
37  OPT ',' (('NO' . KID) | '') 'KIDDING,' = ','
38  WID = '132'
39  OPT ',WIDTH=' (DG . WID) ',' = ','
40  WID = CV(WID)
41  LNS = '60'
42  OPT ',LINES=' (DG . LNS) ',' = ','
43  LNS = CV(LNS)
44  OPT (',SEQ,' . SEQ) | ',NOSEQ,' = ','
45  SRC = 'O2'

THE PRINCETON INTERCAL COMPILER

INITIALIZATION

46  OPT ',' (('NO' . SRC) | (HEX0 'PUN' . SRC) | '') 'SOURCE,' = ','
47  SRC 'NO' = 'RETURN'
48  FMT = 'P2'
49  OPT ',' (('NO' . FMT) | '') 'FORMAT,' = ','
50  FMT 'NO' = 'RETURN'
51  COD = 'NO'
52  OPT ',' (('' . COD) | 'NO') 'CODE,' = ','
53  LST = 'NO'
54  OPT ',' (('' . LST) | 'NO') 'LIST,' = ','
55  SUB = 'OPTSUB'
56  OPT ',' (((('NO' | '') 'OPTSUB') . SUB) | ('NOSUB' '' . SUB)) ',' = ','
57  DEK = 'NO'
58  OPT ',' (('' . DEK) | 'NO') 'DECK,' = ','
59  FILE = IDENT(DEK) '*DECK'
60  FILE = '-' PDS('PRELIM')
61  OPT ',' (('NO' . GHO) | '') 'GO,' = ','
62  OPT ',' (('NO' . BUG) | '') 'BUG,' = ','
63  IAM = 'PROSE'
64  OPT ',' (('PROSE' | 'IAMBIC') . IAM) ',' = ','
65  OPT = NE(SIZE(OPT),1) 'EXTRANEOUS:  ' SUBSTR(OPT,2,SIZE(OPT) - 2)
66  OPT (LEN(11) '' $ OUTPUT $ OUTPUT) $ OUTPUT '' $ OUTPUT REM $ OUTPUT
67  OUT = .EJ
68  'OPTIONS IN EFFECT:' '' $ OUTPUT $ OUTPUT REM $ OUTPUT '' $ OUTPUT
69  (';WIDTH=' WID ';LINES=' LNS ';' IAM ';') ';' BREAK(';') $ OUTPUT FAIL
70  (NO(SUBSTR('NOSOURCE  ',4 - SIZE(SRC) / 2,8)) NO(LST 'LIST'))
71  (NO(SUBSTR('NOFORMAT  ',4 - SIZE(FMT) / 2,8)) NO(COD 'CODE'))
72  (NO(SUBSTR('NOSEQ  ',4 + SIZE(SEQ) / 2,5)) NO(DEK 'DECK'))
73  (NO(SUB SUBSTR('NOSUB',1,5 - 5 * (SIZE(SUB) / 6))) NO(BUG 'BUG'))
74  OUTPUT = NO(KID 'KIDDING') DIFFER(KID) LOAD('WTP(STRING)STRING')
   +              RPAD("ICLOWNI   YOU'VE GOT TO BE KIDDING! <",107,'-')
   +              ' SNIDE REMARK'
75  (DIFFER(KID) WTP(OUTPUT) UNLOAD('WTP'))
76  (NO('NODICE') NO(GHO 'GO') NO('OPT'))
77  SEQ = LEN(80 - (SIZE(SEQ) / 5) * 8)
78  GHO = DIFFER(DEK) DIFFER(GHO) REWIND('SCRATCH') DETATCH(.FILE)
   +              OUTPUT(.GHO,'SCRATCH') '-NOLIST,NOEXECUTE'
79  FILE = DIFFER(GHO) '-NOEXECUTE'
80  GHO = 'END'
81  FILE = DIFFER(SUB) '-' PDS(SUB) PFX('-' PDS(REPLACE(SUB,'SUB','PFX')))
82  FILE = DIFFER(LIB) ENDFILE('SCRATCH') OUTPUT(.FILE,'SUB')
   +              './ ADD NAME=NOOPTSUB'
83  ELBL = IDENT(LIB) 'START'

THE PRINCETON INTERCAL COMPILER

MAIN PROCESSING LOOP

 84 IN A = INPUT :F(LAST)
 85  FMT 'R' = 'R' O(LPAD(DO + 1,5) '  ' A)
 86  A SEQ $ A
 87  A POS(0) HEX012 HEX0 REM $ A = PFX(A) :S(IN)
 88  L = L A
 89
 90 PROC L IDP = HEX0 :F(IN)
 91  L (BREAK(HEX0) . STAT) HEX0 =
 92  (IDEN STAT) NOTANY(' ') :F(SAVE)
 93  (IDEN STAT HEX0 A) 'PLEASE ' HEX0 'DO' :S(PD)
 94  PACK(STAT) POS(0) ('REINSTATE' | 'ABSTAINFROM') RPOS(0) :F(OK)
 95  A (BREAK(')') ')' (SPAN(' ') | '')) . ERR = :F(OK)
 96  STAT = STAT ERR
 97 OK POL(STAT)
 98 SAVE IDEN = A
 99  IDEN BREAK('PD') . A = LPAD(TRIM(A),7) ' ' :(PROC)
100
101 PD IDEN = IDEN ' DO' :(PROC)

102 COMP COMP = ' '
103  WKINP = PACK(S)
104  (GE(SIZE(WKINP),150) O(RPAD("ICLOWNI   ARE YOU SURE YOU KNOW WHAT "
    +              "YOU'RE DOING?  <",98,'-') ' MESSAGE TO PROGRAMMER'))
105  NNN = LIB CONVERT(DO + 1,'STRING')
106  PTR = 0
107  SKIP('(') :F(NOLBL)
108  LBL = NUM(1) SKIP(')') :F(NGLBL)
109  DIFFER(LABEL<LBL>) :F(OKLBL)
110  ERROR('182','YOU MUST LIKE THIS LABEL A LOT!') :(NOLBL)
111 NGLBL ERROR('197',"SO!  65535 LABELS AREN'T ENOUGH FOR YOU?") :(NOLBL)
112 OKLBL LABEL<LBL> = NNN ADD('L' LBL)
113 NOLBL FLBL = ADD(ELBL " H = '" NNN "' EQ(A" NNN ") :F(E" NNN ")")
114  WKINP ('PLEASEDO' | 'PLEASE' | 'DO') @PTR
115  'X' ('' . LBL) ('X' . U)
116 QUAL U = ADD(SKIP('%') ' GT(RND(100),' NUM(0,.VAL) LE(VAL,100)
    +              ') :S(E' NNN ')')
117  U PFX(' A' NNN ' = ' IDENT(LBL) SKIP(("NOT" | "N'T") . LBL) '1') 'X'
    +              :S(QUAL)
118  WKINP LEN(PTR) =
119  WKINP = REPLACE(WKINP,'&Vv',HEX012)
120 WOW WKINP "!" = "'." :S(WOW)
121 ULP WKINP (LEN(1) ANY(HEX012)) . U = REPLACE(REVERSE(U),HEX012,'&Vv')
    +              :S(ULP)
122  ADD(CLR() ' ' VS('X') SKIP('<-') EXP() ') :F(DIM)' PUSH(1)) :S(ECOMP)
123  ADD(CLR() ' ' ARR('X') SKIP('<-') " = ARRAY('" EXLIST('BY')
    +              FIND(RPOS(0)) "') :F(DIM)" PUSH(1)) :S(ECOMP)
124  ADD(CLR() SKIP('(') " :($DO('" NUM(1) SKIP(')NEXT' RPOS(0)) "'))"
    +              PUSH(2)) :S(ECOMP)
125  (ADD(CLR() SKIP('FORGET#') ' NXTS = NXTS - ' NUM(1) FIND(RPOS(0))
    +              PUSH(3)) ADD(' NXTS = LT(NXTS) 0')) :S(ECOMP)
126  (ADD(CLR() SKIP('FORGET') ' NXTS = NXTS - DCML(' EXP() ') :F(DIM)'
    +              PUSH(3)) ADD(' NXTS = LT(NXTS) 0')) :S(ECOMP)
127  (ADD(CLR() SKIP('RESUME#') ' NXTS = NXTS - ' NUM(1) FIND(RPOS(0))
    +              PUSH(4)) ADD(" TP = 'E' NXTAK<NXTS + 1> :F(RSM)S(STP) "))
    +              :S(ECOMP)
128  (ADD(CLR() SKIP('RESUME') ' TP = DCML(' EXP() ') :F(DIM)' PUSH(4))
    +              ADD(' NXTS = NE(TP) NXTS - TP :F(RS0)')
    +              ADD(" TP = 'E' NXTAK<NXTS + 1> :F(RSM)S(STP)")) :S(ECOMP)
129  (CLR() SKIP('STASH')) :F(NOT5)
130 STSH (' ' VA()) (BREAK("'") LEN(1) BREAK("'") . U REM)      LBL :F(NG)
131  VAL = " = IDENT(IG" REPLACE(U,".:,;","ABCD") ") "
132  (ADD(" TP = " LBL) ADD(" ST<'" U "'>" VAL "ST<'" U "'> + 1"))
133  (ADD(LBL VAL 'TP') DIFFER(REPLACE(SUBSTR(U,1,1),':','.'),'.') ADD(LBL
    +              VAL "IDENT(DATATYPE(TP),'ARRAY') COPY(TP)"))
134  FIND('+') :S(STSH)
135  (FIND(RPOS(0)) PUSH(5)) :S(ECOMP)F(NG)
136 NOT5 (CLR() SKIP('RETRIEVEE')) :F(NOT6)
137 RTRV VA() LEN(2) (BREAK(' ') . U) LEN(2) (BREAK("'") . VAL) :F(NG)
138  (ADD(' ' U ' = IDENT(IG' REPLACE(VAL,'.:,;','ABCD') ') ' U ' - 1')
    +              ADD(' LT(' U ') :S(STK)') ADD(' ' U ' = EQ(' U ')'))
139  FIND('+') :S(RTRV)
140  (FIND(RPOS(0)) PUSH(6)) :S(ECOMP)F(NG)
141 NOT6 (CLR() SKIP('IGNORE')) :F(NOT7)
142 IGNR VA('X') BREAK('I') . LBL ('IG' BREAK(")")) . U :F(NG)
143  ADD(DIFFER(SUBSTR(REPLACE(U,'B','A'),3,1),'A') LBL
    +              "'X') = ARRAY(PROTOTYPE(" LBL U ")))")
THE PRINCETON INTERCAL COMPILER

COMPILATION SUBROUTINE

144  (ADD(" " U " = 'X'") FIND('+')) :S(IGNR)
145  (FIND(RPOS(0)) PUSH(7)) :S(ECOMP)F(NG)
146 NOT7 (CLR() SKIP('REMEMBER')) :F(NOT8)
147 RMBR VA('X') (' IG' BREAK(")")) . U :F(NG)
148  (ADD(U " =") FIND('+')) :S(RMBR)
149  (FIND(RPOS(0)) PUSH(8)) :S(ECOMP)F(NG)
150 NOT8 (ADD(CLR() SKIP("ABSTRAINFROM(") "DIFFER(LB<'" NUM(1,.VAL)
    +              "'>) :F(ABN)") ADD(" $('A' LB<'" VAL "'>) =1"
    +              PUSH(9))) :S(ECOMP)
151 (ADD(CLR() SKIP ("REINSTATE(") " DIFFER(LB<'" NUM(1, VAL)
    +              "'>) :F(ABN)") ADD(" $('A' LB<'" VAL "'>) = 1"
    +              PUSH(10))) :S(ECOMP)
152  (CLR() FIND('ABSTAINFROM' | 'REINSTATE')) ('' $ LBL) LEN(9)
    +              (LEN(1) $ LBL | '') :F(NOT10)
153  LBL 'O' = ',1'
154  WKINP = WKINP '+'
155 ARLP U = GER<FIND(BREAK('+'))> SKIP('+') :F(EAR)
156  (DIFFER(U) ADD(' ABRE(' U LBL')')) :F(NG)S(ARLP)
157 EAR PUSH(10 - SIZE(LBL) / 2) :(ECOMP)
158 NOT10 ADD(CLR()  SKIP('GVIEUP' RPOS(0)) 'E' NNN SUBSTR(DUPL(' ', 
    +              SIZE(LBL) * 3 + 1) ':(EXIT)',1,8) PUSH(11)) :S(RETURN)
159  (CLR() SKIP('WRITEIN')) :F(NOT12)
160 RITE ADD(' ' VS(X) 'IN())') :F(NG)
161  FIND('+') :S(RITE)
162  (FIND(RPOS(0)) PUSH(12)) :S(ECOMP)F(NG)
163 NOT12 (CLR() SKIP('READOUT')) :F(NG)
164 READ ADD(' OT(' VSM() ')') :F(NG)
165  FIND('+') :S(READ)
166  (FIND(RPOS(0)) PUSH(13)) :S(ECOMP)
167 NG S BREAK('DP') =
168 APOS S "'" = REPLACE("' " '"' "'" " '","'",HEX0) :S(APOS)
169  COMP = ADD(" ERROR('000','" TRIM(REPLACE(S,HEX0,"'")) "',WAY(H))") '*'
170  BAD = BAD + 1
171 ECOMP ELBL = 'E' NNN :(RETURN)

THE PRINCETON INTERCAL COMPILER

SYNTACTICAL ANALYSIS SUBROUTINES (IN ALPHABETICAL ORDER)

172 ARR PTRX = PTR
173  ARR = "$(ST<'" FIND(ANY(",:") . TYP) NUM(1,.VAL) "'> '" TYP VAL "')"
    +              :S(IGARR)
174  PTR = PTRX :(FRETURN)
175 IGARR DIFFER(X) :F(RETURN)
176  ARR ")" = " IG" TY<TYP> VAL ")" :(RETURN)
177
178 BITS NMBR = N
179  GEBIG(N,'4294967296') :S(FRETURN)
180  TOP = '0'
181  GEBIG(N,'2147483643') :F(TOP0)
182  TOP = '1'
183  NMBR = CV(CONVERT(N '.D0','DREAL') - TWO31)
184 TOP0 NMBR = CV(NMBR)
185 BTLP BITS = REMDR(NMBR,2) BITS
186  NMBR = NMBR / 2
187  BITS = GE(SIZE(BITS),31) TOP BITS :F(BTLP)S(RETURN)
188
189 CLR PTR = 0 :(RETURN)
190
191 ELEM ELEM = ID() :S(RETURN)
192  PTRX = PTR
193  ELEM = 'F' UT<FIND(ANY('&Vv'))> '(' ID() ')' :S(RETURN)
194  PTR = PTRX :(FRETURN)
195
196 EXLIST EXLIST = EXPR() :F(FRETURN)
197 EXLOOP EXLIST = EXLIST ',' SKIP(X) EXPR() :F(RETURN)S(EXLOOP)
198
199 EXP EXP = EXPR() FIND(RPOS(0)) :S(RETURN)
200  ERROR('017','DO YOU EXPECT ME TO FIGURE THIS OUT?') :(FRETURN)
201
202 EXPR EXPR = ELEM() :F(FRETURN)
204  EXPR = 'F' BT<FIND(ANY('c~'))> '(' EXPR ',' ELEM() ')' :S(RETURN)
205  PTR = PTRX :(RETURN)
206
207 FIND WKINP POS(PTR) X . FIND @PTR :F(FRETURN)S(RETURN)
208
209 GEBIG LGE(LPAD(I,SIZE(J),'0'),LPAD(J,SIZE(I),'0')) :S(RETURN)F(FRETURN)
210
211 ID PTRX = PTR
212  ID = SKIP(ANY('"' "'") . QUOT) EXPR() SKIP(QUOT) :S(RETURN)
213  PTR = PTRX
214  ID = VSM() :S(RETURN)F(FRETURN)
215
216 MESH PTRX = PTR
217  MESH = SKIP('#') "'" SUBSTR(BITS(NUM(0)),17,16) "'" :S(RETURN)
218  PTR = PTRX :(FRETURN)
219
220 NUM WKINP POS(PTR) (SPAN('0') $ NUM | '') FENCE ((DG $ NUM) | '')
    +              @PTRX :F(FRETURN)
221  (DIFFER(NUM) GE(CV(NUM),N) LE(CV(NUM),65535)) :F(FRETURN)
222  PTR = PTRX
223  DIFFER(OPT) :F(RETURN)
224  $OPT = NUM :(RETURN)
225
226 SUB PTRX = PTR
227  SUB = "ITEM($(ST<'" FIND(ANY(",;") . TYP) NUM(1,.VAL) SKIP('SUB')
    +              "'> '" TYP VAL "')," EXLIST() ")" :S(IGSUB)
228  PTR = PTRX :(FRETURN)
229 IGSUB DIFFER(X) :F(RETURN)
230  SUB = SUB ' = ' LNG<TYP> '('
231  SUB ")" = " IG" TY<TYP> VAL ")" :(RETURN)
232
233 VA VA = VAR(X) :S(RETURN)
234  VA = ARR(X) :S(RETURN)F(FRETURN)
235
236 VAR PTRX = PTR
237  VAR = "$(ST<'" FIND(ANY(".:") . TYP) NUM(1,.VAL) "'> '" TYP VAL "')"
    +              :S(IGVAR)
238  PTR = PTRX :F(FRETURN)
239 IGVAR DIFFER(X) :F(RETURN)
240  VAR = VAR ' = ' LNG<TYP> '('
241  VAR ")" = " IG" TY<TYP> VAL ")" :(RETURN)
242
243 VS VS = VAR(X) :S(RETURN)
244  VS = SUB(X) :S(RETURN)F(FRETURN)
245
246 VSM VSM = VS() :S(RETURN)
247  VSM = MESH() :S(RETURN)F(FRETURN)

THE PRINCETON INTERCAL COMPILER

OTHER SUBROUTINES (IN ALPHABETICAL ORDER)

248 ADD (FLO(X) IDENT(COD) P2(RPAD(X,132),132)) :(RETURN)
249
250 CV CV = CONVERT(X,'INTEGER') :F(FRETURN)S(RETURN)
251
252 DF X = X ';'
253 DFS X BREAK(';') . A ';' = DEFINE(A) :F(RETURN)S(DFS)
254
255 ERR (NE(&ERRTYPE,6001) ERROR('778','UNEXPLAINED COMPILER BUG {'
    +              &ERRTYPE - 632 '.' REVERSE(&LASTNO) '}','1')) :F(ABORT)
256 
257 ERROR OUTPUT = RPAD('LCL' NUM 'I   ' MSG '  <',114,'-') ' ERROR'
258  FTL = FTL + 1
259  &CODE = 1 IDENT(NXT) :S(RETURN)
260  &CODE = 13 LOAD('WTP(STRING)STRING') WTP(OUTPUT)
261  OUTPUT = DUPL(' ',10) 'ON THE WAY TO THE STATEMENT ' NXT
262  OUTPUT = DUPL(' ',10) 'CORRECT SOURCE AND RESUBNIT' :(END)
263
264 FLO X LEN(80) . AT LEN(1) :F(FNL)
265  (' ' AT) QT(1) ESE
266  QTS = QN
267  QTE = QT(1)
268  REVERSE(AT) (NOTANY("'") . QTE *NE(REMDR(QTS - QN,2)) @BRK) |
    +              (@BRK ('(' | ',')) | (')' @BRK) | ESE:F(ARGH)
269  QTE LEN(1) = "'"
270  X LEN(80 - BRK) = '+' QTE
271  AT RPOS(BRK) LEN(BRK) = QTE
272  FILE = RPAD(AT,80) :(FLO)
273 FNL FILE = RPAD(X,80) :(RETURN)
274
275 NO ('     ' X) ('   ' ('N' | ('  ' NOTANY('N'))) REM) $ OUTPUT :(RETURN)
276
277 O :($SRC)
278 PUN Y = 'Â¬' REPLACE(X,' ','%')
279 OPU Y 'v' = 'V@-' :S(OPU)
280  PUNCH = Y
281 O2 $OUT = REPLACE(X,'v','V')
282  LN = LN + 1
283  OUT = .OUTPUT
284  LN = EQ(LN,LNS) :F(OPL)
285  OUT =  EJ
286 OPL REPLACE(X,&ALPHABET,V) (POS(0) BREAK('-') REM) $ PLUS :(RETURN)
287
288 PACK PACK ' ' = :S(PACK)F(RETURN)
289
290 PDS PDS = 'COPY ' M :(RETURN)
291
292 PFX RESULT = X ';' RESULT :(RETURN)
293
294 PLUR PLUR = NE(N,1) 'S' :(RETURN)
295
296 POL (IDEN PR(IDEN Z)) 'PLEASE' :F(IM)
297  PL = PL + 1
298 IM DO = DO + 1 :(RETURN)
299
300 PR X = RPAD((COMP(X) LPAD(DO + 1,5) '   ' TRIM(X)),WID) :($FMT)
301 P2 X LEN(WID) $ P =

THE PRINCETON INTERCAL COMPILER

OTHER SUBROUTINES (IN ALPHABETICAL ORDER)

302  X O(P) (LEN(1) REM) $ P = RPAD(DUPL(' ',20) P,WID) :S(P2)F(RETURN)
303
304 PUSH STMTS<N> = LIST(NNN,STMTS<N>) :(RETURN)
305
306 QT QN = DIFFER(X) :S(RETURN)
307  QN = QN + 1 :(FRETURN)
308
309 RND (EQ(REMDR(KLOCK(),2)) RD2())
310 RD2 RX = REMDR(RX * 1027,1048576)
311  RND = 1 + (N * RX) / 1048576 :(RETURN)
312
313 TB X = X ';'
314 TBS X ('' $ V) (BREAK('=') . L) '=' (BREAK(';(')    A) (('(' (BREAK(')')
    +              . V) ')') | '') ';' = :F(RETURN)
315  $L = TABLE(CV(A))
316  V = V '/'
317 TBI V (BREAK('=') . A) '=' (BREAK('/') . U) '/' = :F(TBS)
318  ITEM($L,A) = U :(TBI)

THE PRINCETON INTERCAL COMPILER

CLOSEOUT ROUTINES

319 LAST COD = POL(L) O() O(PL ' / ' DO) O() 'NO'
320  ADD(ELBL " ERROR('633','PROGRAM FELL OFF THE EDGE','THE NEW WORLD')")
321  FILE = DIFFER(LIB) ENDFILE('SUB') OUTPUT(.FILE,'PFX')
    +              ' / ADD NAME=NOOPTPFX'
322  (LT(PL * 5,DO) ERROR('079','USER IS NOT SUFFICIENTLY POLITE','1'))
323  (GT(PL * 3,DO) ERROR('099','USER IS OVERLY POLITE','1'))
324  RESULT GT(RND(10),9) BUG ":" = "$('A' RND(" DO ")) = 'X' :"
325  LABEL = CONVERT(LABEL,'ARRAY')
326  A = 2
327  L = REPLACE(LIB,"S","'")
328 LBLP A = PFX(" LB<'" LABEL<A,1> "'> = " L LABEL<A,2> L) A + 1 :S(LBLP)
329  L = IDENT(L) "AB<11> = '" PFX(' LB = TABLE(' A + 50 + A / 3 ')')
330  A = 1
331 ABLP L = PFX(' ' L "'") = "AB<" A "> = '"
332  L DIFFER(LIB) "'" = "AB<" A "> '"
333  U = STMTS<A> :F(FROG)
334 POP A = IDENT(U) A + 1 :S(ABLP)
335  L = L CONT(U) ','
336  U = NEXT(U) :(POP)
337 FROG (IDENT(LIB) PFX('INIT LNS = ' LNS) IDENT(LST)) :F(WILL)
338  OUT = .EJ
339  LN = 0 DF('NX(N);PP(N);TST(N);CT(N)')
340  U = 0
341  V = 11
342  PLUS = O('         <-     NEXT    FORGET    RESUME    STASH    '
    +              'IGNORE   ABSTAIN  GIVE UP') '        --     ----    '
    +              '------    ------    -----     -----   ------   '
    +              '-------' :(LIS)
343 PP PP = LPAD(CT(N),10)
344  STMTS<N> = NX(N) :(RETURN)
345 TST (IDENT(CT(N)) GE(STMTS<N>,2)) :S(RETURN)F(FRETURN)
346 CT CT = IDENT(DATATYPE(STMTS<N>),'LIST') CONT(STMTS<N>) :(RETURN)
347 NX NX = IDENT(DATATYPE(STMTS<N>),'LIST') NEXT(STMTS<N>) :S(RETURN)
348  NX = STMTS<N> + 1 :(RETURN)
349 LIS (O(PP(1) PP(2) PP(3) PP(4) PP(5 + U) PP(7 + U) PP(9 + U) PP(V))
    +              EQ(U) TST(5) TST(7) TST(9) DUPL(' ',42) 'RETRIEVE  '
    +              'REMEMBER REINSTATE' DUPL(' ',42) '________ ________ '
    +              '_________1') (LEN(70) $ PLUS) (LEN(70) $ PLUS)
    +              (LEN(1) $ U)
350  (TST(V) LT(V,13) DUPL(' ',72) 'WRITE IN' DUPL(' ',72) 'READ OUT'
    +              DUPL(' ',72) '________' (V + 1)) POS((V / 12) * 80)
    +              (LEN(80) $ PLUS) RTAB(82) (LEN(80) $ PLUS) (LEN(2) $ V)
351  (EQ(U,1) EQ(V,13) TST(6) TST(8) TST(10) TST(13) OUTPUT) POS(0)
    +              SPAN(' ') RPOS(0) :F(LIS)
352 WILL RESULT BREAK(';') . V LEN(1) = FLO(V) :S(WILL)
353  FILE = IDENT(LIB) 'FND'
354  'SUCCESSFUL COMPILATION' REM $ EJ '' $ OUTPUT
355  OUTPUT = 0 + BAD ' UNDECODEABLE STATEMENT' PLUR(BAD)
356  OUTPUT = 0 + FTL ' NON-FATAL ERROR' PLUR(FTL)
357  OUTPUT = '0 FATAL ERRORS'
358  OUTPUT = 2 - (FTL + 2) / (FTL + 1) ' WAS HIGHEST SEVERITY CODE'
359
360 END